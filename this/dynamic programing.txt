DYNAMIC PROGRAMING : |
class - 1            |
.....................|
...........................|
wap for fibonacci using dp |
...........................|
#include<iostream>
#include<string>
#include<cstring>
using namespace std;
int Fibonnaci(int n){
   if(n==0 || n==1){
    return n;
   }
   int ans  = Fibonnaci(n-1)+Fibonnaci(n-2);
   return ans;
}
int topdown(int n , int *dp){
    if(n==0 || n== 1){
        dp[n] = n;
        return dp[n];
    }
    if(dp[n] != -1){
        return dp[n];
    }
    int ans = topdown(n-1 , dp) + topdown(n-2 , dp);
    dp[n] = ans;
    return dp[n];
}
int Bottomup(int n){
    int dp[1000] = {0};
    dp[0] = 0;
    dp[1] = 1;
    for(int i = 2 ; i <= n ;i++){
        dp[i] = dp[i-1] + dp[i-2];
    }
    return dp[n];
}
int main(){
    int n;
    cin>>n;
    int dp[1000];
    for(int i = 0 ; i < 1000 ; i++){
        dp[i] = -1;
    }
    cout<<topdown(n , dp)<<endl;
    cout<<Bottomup(n)<<endl;
    cout<<Fibonnaci(n)<<endl;
    return 0;
}
.......................................................................................................................................................................
find the minimum number of way in which a number can form |
..........................................................|
#include<iostream>
#include<string>
#include<climits>
#include<cstring>
using namespace std;
int ThreePaths(int number){
    if(number == 1){
        return 0;
    }
    int op1 = INT_MAX , op2 = INT_MAX , op3 = INT_MAX;
    op1 = ThreePaths(number-1)+1;
    if(number%2 == 0){
        op2 = ThreePaths(number/2)+1;
    }
    if(number%3 == 0){
        op3 = ThreePaths(number/3)+1;
    }

    int ans = min(op1 , min(op2 , op3));
    return ans;
}
int topdown(int number , int *dp){
    if(number == 1){
        dp[number] = 0;
        return dp[number];
    }
    if(dp[number] != -1){
        return dp[number];
    }
    int op1 = INT_MAX , op2 = INT_MAX , op3 = INT_MAX;
    op1 = topdown(number-1 , dp)+1;
     if(number%2 == 0){
        op2 = topdown(number/2 , dp)+1;
    }
    if(number%3 == 0){
        op3 = topdown(number/3  , dp)+1;
    }

    int ans = min(op1 , min(op2 , op3));
    dp[number] = ans;
    return dp[number];
}
int bottomup(int n){
    int dp[1000] = {0};
    dp[1] = 0;
    for(int i = 2 ; i <= n ; i++){
        int op1 = INT_MAX , op2 = INT_MAX , op3 = INT_MAX;
        op1 = dp[(i-1)]+1;
        if(i%2 == 0){
        op2 = dp[(i/2)]+1;
        }
        if(i%3 == 0){
        op3 = dp[(i/3)]+1;
        }
        dp[i] = min(op1,min(op2,op3));
    }
     return dp[n];
}
int main(){
    int n;
    int dp[1000];
    for(int i = 0 ; i < 1000 ;i++){
        dp[i] = -1;
    }
    cin>>n;
    cout<<topdown(n , dp)<<endl;
    cout<<bottomup(n)<<endl;
    cout<<ThreePaths(n);
    return 0;
}
.......................................................................................................................................................................
N STAIRS : |
...........|
#include<iostream>
#include<string>
#include<climits>
#include<cstring>
using namespace std;
int NSteps(int n , int k=3){
    int ans = 0;
    if(n == 0){
        return 1;
    }
    if(n<0){
        return 0;
    }
    for(int i = 1; i <= k ; i++){
        ans += NSteps(n-i , k);
    }
    return ans;
}
int TopDown(int n , int *dp , int k){

    if(n == 0){
        dp[n] = 1;
        return 1;
    }
    if(n<0){
        dp[n] = 0;
        return 0;
    }
    if(dp[n] != -1){
        return dp[n];
    }
    int ans = 0;
    for(int i = 1 ; i <= k ; i++){
        ans += TopDown(n-i,dp,k);
    }
    dp[n] = ans;
    return dp[n];
}
int BottomUp(int n , int k = 3){
    int dp[1000] = {0};
    dp[0] = 1;
    for(int steps = 1 ; steps <= n ; steps++){
        for(int i = 1 ; i <= k ; i++){
            if(steps-i >= 0){
                dp[steps] += dp[steps-i];
            }
        }
    }
    return dp[n];
}
int BottomUpinN(int n , int k = 3){
    int dp[1000] = {0};
    dp[0] = 1;
    dp[1] = 1;
    for(int i = 2 ; i <= n ; i++){
        if(i-k-1>= 0){
            dp[i] = 2*dp[i-1]-dp[i-k-1];
        }
        else{
            dp[i] = 2*dp[i-1];
        }
    }
    for(int i = 0 ; i<= n ; i++){
        cout<<dp[i]<<" ";
    }
    cout<<endl;
}
int main(){
    int dp[1000];
    for(int i = 0 ; i < 1000 ;i++){
        dp[i] = -1;
    }
    int n;
    cin>>n;
    BottomUpinN(n);
    cout<<endl;
    cout<<BottomUp(n);
    cout<<endl;
    cout<<NSteps(n);
    cout<<endl;
   cout<<TopDown(n , dp , 3);
    return 0;
}
